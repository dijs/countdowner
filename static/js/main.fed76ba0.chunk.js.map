{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","downloads","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setDownloads","fetch","then","res","json","data","assets","windows","find","_ref","name","indexOf","browser_download_url","osx","_ref2","version","useDownloads","react_default","a","createElement","className","alt","src","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sKA4EeA,MAjDf,WAAe,IACLC,EAzBV,WAAwB,IAAAC,EACYC,IAAMC,WADlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACfD,EADeI,EAAA,GACJG,EADIH,EAAA,GAqBtB,OAnBKJ,GACHQ,MAAM,iEACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,GAAKA,EAAKC,OAAV,CAGA,IAAMC,EAAUF,EAAKC,OAAOE,KAC1B,SAAAC,GAAA,OAAuC,IAAvCA,EAAGC,KAAgBC,QAAQ,SAC3BC,qBACIC,EAAMR,EAAKC,OAAOE,KAAK,SAAAM,GAAA,OAAuC,IAAvCA,EAAGJ,KAAgBC,QAAQ,SACrDC,qBACHZ,EAAa,CACXe,QAASV,EAAKK,KACdH,UACAM,WAID,CAAEpB,aAIauB,GAAdvB,UACR,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mBAAmBC,IAAI,qBAChCL,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,qBAGfF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,+EACAF,EAAAC,EAAAC,cAAA,oCAC0B1B,EAAYA,EAAUsB,QAAU,OAEzDtB,GACCwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGI,KAAM9B,EAAUoB,KACjBI,EAAAC,EAAAC,cAAA,4CAEFF,EAAAC,EAAAC,cAAA,KAAGI,KAAM9B,EAAUc,SACjBU,EAAAC,EAAAC,cAAA,4CAINF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,oJAOJF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,sBAAsBC,IAAI,qCAGvCL,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,aAAaC,IAAI,8BAD5B,+HCvDcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.fed76ba0.chunk.js","sourcesContent":["import React from 'react';\nimport './main.scss';\n\nfunction useDownloads() {\n  const [downloads, setDownloads] = React.useState();\n  if (!downloads) {\n    fetch('https://api.github.com/repos/dijs/countdowner/releases/latest')\n      .then(res => res.json())\n      .then(data => {\n        if (!data.assets) {\n          return;\n        }\n        const windows = data.assets.find(\n          ({ name }) => name.indexOf('exe') !== -1\n        ).browser_download_url;\n        const osx = data.assets.find(({ name }) => name.indexOf('dmg') !== -1)\n          .browser_download_url;\n        setDownloads({\n          version: data.name,\n          windows,\n          osx\n        });\n      });\n  }\n  return { downloads };\n}\n\nfunction App() {\n  const { downloads } = useDownloads();\n  return (\n    <div className=\"container\">\n      <header>\n        <img alt=\"countdowner logo\" src=\"/images/logo.png\" />\n        <h1>\n          Countdowner<sub>Beta</sub>\n        </h1>\n      </header>\n      <main>\n        <aside>\n          <h2>Features Requested Thus Far</h2>\n          <p>• Dianamic Sizing from the corner</p>\n          <p>• A Color Slider in Settings For the main Color of each Theme</p>\n          <h4>\n            Current Beta Version | {downloads ? downloads.version : '...'}\n          </h4>\n          {downloads && (\n            <div className=\"downloads\">\n              <a href={downloads.osx}>\n                <button>Download the Beta for MAC</button>\n              </a>\n              <a href={downloads.windows}>\n                <button>Download the Beta for PC</button>\n              </a>\n            </div>\n          )}\n          <div className=\"phone-message\">\n            <p>\n              Currently this application is only available for desktops. Please\n              comeback soon and download this Beta application on your Mac or\n              PC.\n            </p>\n          </div>\n        </aside>\n        <figure>\n          <img alt=\"countdowner preview\" src=\"/images/countdownerPreview.png\" />\n        </figure>\n      </main>\n      <footer>\n        <img alt=\"leath logo\" src=\"/images/LeathRedSmall.png\" />\n        If you are interested in helping with our beta test by providing\n        feedback on this app, please email team@vanderdys.design\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}